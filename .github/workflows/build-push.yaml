name: build-push

# Triggers the workflow on push and pull request events for the 'master' branch
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  run_service_and_test_app:
    runs-on: ubuntu-latest # Specifies that the job should run on the latest Ubuntu environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Uses the checkout action to pull the repository's code at version 3

      # Sets up the Java Development Kit (JDK) version 21 using Temurin
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Pulls the Docker image for the Assessment service from the Docker Hub
      - name: Pull Assessment Docker Image
        run: docker pull mrksdh/assessment

      # Installs curl on the runner by updating the package list and installing the curl package
      - name: Install curl
        run: |
          sudo apt-get update && sudo apt-get install -y curl

      # Create a Docker network with a custom name
      - name: Create Docker Network
        run: |
          docker network create homeNetwork

      # Starts the Assessment Docker container in detached mode, using the specified network and mapping port 8080
      - name: Start Assessment Docker Container
        run: |
          docker run -d --name assessment --network homeNetwork -p 8080:8080 mrksdh/assessment
          sleep 10

      # Performs a health check on the Assessment service by requesting the health endpoint
      - name: Perform Health Check
        run: |
          curl -f http://localhost:8080/health || exit 1

      # Makes the Gradle wrapper script executable
      - name: Gradle
        run: chmod +x ./gradlew

      # Cleans previous builds and creates a shadow JAR file for the Java application
      - name: shadowJar
        run: |
          ./gradlew clean shadowJar

      # Runs the Java application and checks its output for a status code
      # Run the Java app and capture its output
      # Extract the status code
      # Export the status code as an environment variable
      # Check if the status code is valid and equals 200
      - name: Run Application
        run: |
          output=$(java -jar build/libs/*.jar) 
          status_code=$(echo "$output" | awk -F'"code":' '{print $2}' | awk '{print $1}')  
          echo "STATUS_CODE=$status_code" >> $GITHUB_ENV 
          
          if [[ -z "$status_code" || "$status_code" -ne 200 ]]; then
            echo "Error: Status code is either missing or not 200. Exiting."
            exit 1
          fi